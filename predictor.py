# -*- coding: utf-8 -*-
"""DS_Competition_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AM_DRdHgJMQMOwergs9TzjZg9NB3t7Hv

<center><h1> IFT-6758  Data Science  </h1></center>
<center><h2> Fall - 2020 </h2></center> 
<center><h3> Kaggle Competition</h3></center> 
<center><h3> </h3></center> 
<center><h3> Prediction Program</h3></center>

# Read train data
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
# %matplotlib inline

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import minmax_scale

train_data = pd.read_pickle("train_cleaned.pkl")
test_data = pd.read_pickle("test_cleaned.pkl")

train_data.drop(columns=['Id', 'Profile Image', 'Profile Text Color', 'Profile Page Color', 'Profile Theme Color'], inplace=True)
test_data.drop(columns=['Id', 'Profile Image', 'Profile Text Color', 'Profile Page Color', 'Profile Theme Color'], inplace=True)

#Temp drop
#train_data.drop(columns=["Num of Followers", "Num of People Following", "Num of Status Updates", "Num of Direct Messages"], inplace=True)
#train_data = train_data[["Num of Followers", "Num of People Following", "Num of Status Updates", "Num of Direct Messages", "Num of Profile Likes"]]
#train_data = train_data[["Is Profile View Size Customized?", "Avg Daily Profile Visit Duration in seconds", "Profile Creation WeekDay", "Avg Daily Profile Clicks", "Num of Profile Likes"]]
#train_data = train_data[["Num of People Following", "Avg Daily Profile Clicks", "Num of Profile Likes"]]
#train_data = train_data[["Num of People Following", "Num of Status Updates", "Num of Profile Likes"]]

corr =train_data.corr()
sns.heatmap(corr)

cor_data = train_data
cor_data

train = cor_data.to_numpy()
Y_likes = train[:, -1] # for last column
X_likes = train[:, :-1] # for all but last column

X_Kaggle = test_data.to_numpy()

X_likes_scaled = minmax_scale(X_likes)

columnsNamesArr = cor_data.columns.values
labels = columnsNamesArr[:-1]

sns.displot(data=X_likes_scaled, kind='kde', legend=True);
plt.legend(labels)

"""**Scaling and selecting features**"""

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_regression
X_selected_feat_likes = SelectKBest(f_regression, k=17).fit_transform(X_likes_scaled, Y_likes)
X_selected_feat_likes.shape

"""**Sklearn Pipeline**"""

from sklearn.model_selection import train_test_split

# split dataset to train and test
X_train, X_test, y_train, y_test = train_test_split(X_selected_feat_likes, Y_likes, 
                                                    test_size=0.2, 
                                                    shuffle=True, 
                                                    random_state=42 #  To guarantee that the split will always be the same
                                                    )

"""**Classifier**"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)

"""**Metric**"""

## RMSE Metric
from sklearn.metrics import mean_squared_error
import math
rmse = math.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE -> {rmse}")

bias = regressor.intercept_
weights = regressor.coef_ 

print(f"Weights -> {weights}")
print(f"Bias -> {bias}")

"""**Predict Kaggle Data**"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_likes, Y_likes)
y_pred = regressor.predict(X_Kaggle)

preds = 10 ** y_pred - 1
preds = np.around(preds)
np.savetxt("preds.csv", preds, delimiter=",")