# -*- coding: utf-8 -*-
"""DS_Competition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g54eH1bGGLyL88Pe-yHl2u0MRyPgHc1k
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.preprocessing import LabelEncoder

df_train = pd.read_csv("train.csv")
df_train_copy = df_train.copy()

df_train.info()

"""**Dropping classes**"""

df_train.drop(labels=["User Name", "Personal URL", "Location", "User Time Zone"], axis=1, inplace=True)

"""**Managing TimeStamp**"""

trips_start = df_train[["Id", "Profile Creation Timestamp"]].copy()
trips_start["Profile Creation Timestamp"] = pd.to_datetime(trips_start["Profile Creation Timestamp"])

#https://www.w3resource.com/python-exercises/pandas/datetime/pandas-datetime-exercise-8.php
trips_start["Profile Creation Day"] = trips_start["Profile Creation Timestamp"].dt.day
trips_start["Profile Creation WeekDay"] = trips_start["Profile Creation Timestamp"].dt.day_name()
trips_start["Profile Creation Month"] = trips_start["Profile Creation Timestamp"].dt.month
trips_start["Profile Creation Year"] = trips_start["Profile Creation Timestamp"].dt.year
trips_start["Profile Creation Hour"] = trips_start["Profile Creation Timestamp"].dt.hour
trips_start = trips_start.drop(columns=["Profile Creation Timestamp"])

df_train = df_train.join(trips_start.set_index('Id'), on='Id')

#Here, this is an totally optional step. I moved the 3 features added to the dataframe to the front of the dataframe to make it easy to see them when printing
#https://stackoverflow.com/questions/25122099/move-column-by-name-to-front-of-table-in-pandas
for col_name in ["Profile Creation Hour", "Profile Creation WeekDay", "Profile Creation Day", "Profile Creation Month", "Profile Creation Year"]:
  mid = df_train[col_name]
  df_train.drop(labels=col_name, axis=1, inplace = True)
  df_train.insert(10, col_name, mid)

df_train.drop(columns=["Profile Creation Timestamp"], inplace=True)

"""**Converting Categories to numeric**"""

cover_encoder = LabelEncoder()
df_train['Profile Cover Image Status'] = df_train['Profile Cover Image Status'].replace(np.nan, "unknown", regex=True)
df_train['Profile Cover Image Status'] = cover_encoder.fit_transform(df_train['Profile Cover Image Status'])
print(cover_encoder.classes_)

verification_encoder = LabelEncoder()
df_train['Profile Verification Status'] = verification_encoder.fit_transform(df_train['Profile Verification Status'])
print(verification_encoder.classes_)


'''
text_color_encoder = LabelEncoder()
df_train['Profile Text Color'] = df_train['Profile Text Color'].replace(np.nan, 'none', regex=True)
df_train['Profile Text Color'].apply(lambda x: x if(len(str(x)) == 6) else 'none')
df_train['Profile Text Color'] = text_color_encoder.fit_transform(df_train['Profile Text Color'])
print( text_color_encoder.classes_)

page_color_encoder = LabelEncoder()
df_train["Profile Page Color"] = df_train['Profile Page Color'].replace(np.nan, 'none', regex=True)
df_train['Profile Page Color'].apply(lambda x: x if(len(str(x)) == 6) else "")
df_train["Profile Page Color"] = page_color_encoder.fit_transform(df_train["Profile Page Color"])
print( page_color_encoder.classes_)

theme_color_encoder = LabelEncoder()
df_train["Profile Theme Color"] = df_train['Profile Theme Color'].replace(np.nan, 'none', regex=True)
df_train['Profile Theme Color'].apply(lambda x: x if(len(str(x)) == 6) else "")
df_train["Profile Theme Color"] = theme_color_encoder.fit_transform(df_train["Profile Theme Color"])
print( theme_color_encoder.classes_)
'''

location_encoder = LabelEncoder()
df_train["Location Public Visibility"] = df_train['Location Public Visibility'].replace(np.nan, '??', regex=True)
df_train['Location Public Visibility'] = df_train['Location Public Visibility'].str.lower()
df_train["Location Public Visibility"] = location_encoder.fit_transform(df_train["Location Public Visibility"])
print( location_encoder.classes_)

view_size_encoder = LabelEncoder()
df_train["Is Profile View Size Customized?"] = view_size_encoder.fit_transform(df_train["Is Profile View Size Customized?"])
print( view_size_encoder.classes_)

language_encoder = LabelEncoder()
df_train["User Language"] = df_train['User Language'].str.lower()
df_train["User Language"] = language_encoder.fit_transform(df_train["User Language"])
print( language_encoder.classes_)

category_encoder = LabelEncoder()
df_train["Profile Category"] = df_train['Profile Category'].replace(np.nan, 'unknown', regex=True)
df_train["Profile Category"] = df_train['Profile Category'].replace(' ', 'unknown', regex=True)
df_train['Profile Category'] = df_train['Profile Category'].str.lower()
df_train["Profile Category"] = category_encoder.fit_transform(df_train["Profile Category"])
print( category_encoder.classes_)

df_train["Profile Creation WeekDay"] = df_train["Profile Creation WeekDay"].map({'Monday':0, 'Tuesday':1, 'Wenesday':2, 'Thursday':3, "Friday":4, "Saturday":5, "Sunday":6})
in_order_weekdays = ["Monday", "Tuesday", "Wenesday", "Thursday", "Friday", "Saturday", "Sunday"]
print(in_order_weekdays)

"""**Change unkown values in columns to NAN**

"""

df_train["Profile Cover Image Status"].replace(2, np.nan, inplace=True)
'''
df_train["Profile Text Color"].replace(len(text_color_encoder.classes_)-1, np.nan, inplace=True)
df_train["Profile Page Color"].replace(len(page_color_encoder.classes_)-1, np.nan, inplace=True)
df_train["Profile Theme Color"].replace(len(theme_color_encoder.classes_)-1, np.nan, inplace=True)
'''
df_train["Location Public Visibility"].replace(0, np.nan, inplace=True)

"""**Rounding Daily Profile Visits and Clicks**"""

df_train["Avg Daily Profile Visit Duration in seconds"] = df_train["Avg Daily Profile Visit Duration in seconds"].round()
df_train["Avg Daily Profile Clicks"] = df_train["Avg Daily Profile Clicks"].round()

"""**Filling NAN values with appropriate replacement (Median)**"""

df_train = df_train.fillna(df_train.median())

"""**Convert Columns to appropriate type**"""

df_train.astype({'Profile Cover Image Status': 'int64', 
                 'UTC Offset': 'int64',
                 'Location Public Visibility': 'int64',
                 'Profile Creation WeekDay': 'int64',
                 'Avg Daily Profile Visit Duration in seconds': 'int64',
                 'Avg Daily Profile Clicks': 'int64'})

"""**Saving Model to CSV and Pkl**"""

df_train

df_train.to_pickle("train_cleaned.pkl")
df_train.to_csv("train_cleaned.csv")